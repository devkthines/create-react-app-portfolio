"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegExpFromPath = exports.getPathFromRoute = exports.isLayoutRoute = exports.findConfig = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const path_to_regexp_1 = require("path-to-regexp");
const configExts = ['.js', '.cjs', '.mjs'];
function findConfig(dir, basename) {
    for (const ext of configExts) {
        const name = basename + ext;
        const file = (0, path_1.join)(dir, name);
        if ((0, fs_1.existsSync)(file))
            return file;
    }
    return undefined;
}
exports.findConfig = findConfig;
function isLayoutRoute(routeId, routes) {
    return routes.some(r => r.parentId === routeId);
}
exports.isLayoutRoute = isLayoutRoute;
function getPathFromRoute(route, routes) {
    let currentRoute = route;
    const pathParts = [];
    do {
        if (currentRoute.index)
            pathParts.push('index');
        if (currentRoute.path)
            pathParts.push(currentRoute.path);
        if (currentRoute.parentId) {
            currentRoute = routes[currentRoute.parentId];
        }
        else {
            currentRoute = undefined;
        }
    } while (currentRoute);
    const path = pathParts.reverse().join('/');
    return path;
}
exports.getPathFromRoute = getPathFromRoute;
function getRegExpFromPath(path) {
    const keys = [];
    // Replace "/*" at the end to handle "splat routes"
    const splatPath = '/:params+';
    const rePath = path === '*' ? splatPath : `/${path.replace(/\/\*$/, splatPath)}`;
    const re = (0, path_to_regexp_1.pathToRegexp)(rePath, keys);
    return keys.length > 0 ? re : false;
}
exports.getRegExpFromPath = getRegExpFromPath;
//# sourceMappingURL=utils.js.map